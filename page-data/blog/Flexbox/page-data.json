{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/flexbox","webpackCompilationHash":"2a35bdc61fe9be83cdc9","result":{"data":{"markdownRemark":{"html":"<h1>Flexbox</h1>\n<h2>Why Flexbox?</h2>\n<p>CSS layout is a fundamental part of web development, for a very long time, <code class=\"language-text\">floating</code> and <code class=\"language-text\">positioning</code> are the only techniques we can use to solve this problem. Due to the \"special\" behavior of <code class=\"language-text\">float</code>, we need to always keep the \"\"clear the float\" in mind. Let along there are some use cases that we cannot or very difficult to solve it with the <code class=\"language-text\">floating</code> and <code class=\"language-text\">positioning</code> techniques. For example:</p>\n<ul>\n<li>Center the content vertically in a container div.</li>\n<li>For multi-column layout, keep all columns with different content in same height.</li>\n<li>Nicely distribute the items in multiple lines without writing multiple media queries.</li>\n<li>Specify the order of elements without touching the dom order.</li>\n<li>etc...</li>\n</ul>\n<p>Flexbox technique can solve all those problems easily! Currently all major browsers have supported it, therefore there's no reason not to embrace flexbox!</p>\n<h2>Flex model</h2>\n<p>Similarly to box model, flexbox has a \"flex model\": \"flex container\" and \"flex item\". We can visualize the model from the following diagram:</p>\n<div>\n<img src=\"https://mdn.mozillademos.org/files/3739/flex_terms.png\" alt='flex_term.png'></div>\n<p>Instead of width and height, flexbox introduced the concepts of <code class=\"language-text\">main axis</code> and <code class=\"language-text\">cross axis</code>. <code class=\"language-text\">main axis</code> is the direction that the flex items are laid out (<code class=\"language-text\">main start</code> -> <code class=\"language-text\">main end</code>) and <code class=\"language-text\">cross axis</code> (<code class=\"language-text\">cross start</code> -> <code class=\"language-text\">cross end</code>) is perpendicular to the <code class=\"language-text\">main axis</code>. Along with those two concepts.</p>\n<h2>Flex properties</h2>\n<h3>For flex container:</h3>\n<ul>\n<li><strong>display</strong>: flex or inline-flex, to indicate the flex container should be a block-level or inline-level element.</li>\n<li><strong>flex-direction</strong>: row, column, row-reverse, column-reverse, to indicate the direction of flex items.</li>\n<li><strong>flex-wrap</strong>: wrap, nowrap</li>\n<li><strong>flex-flow</strong>: shorthand for flex-direction,flex-wrap</li>\n<li><strong>justify-content</strong>: center, left, right, flex-start, flex-end, space-around, stretch, etc. See <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content\">MDN</a> for details. Adjust space along main axis.</li>\n<li><strong>align-items</strong>: Similar to 'justify-content' but apply to cross axis.</li>\n</ul>\n<h3>For flex item:</h3>\n<ul>\n<li><strong>flex-basis</strong>: &#x3C;width> this flex item's basic length in the flex direction.</li>\n<li><strong>flex-grow</strong>: &#x3C;number> If combined flex items size is smaller than flex container size, then remaining size will be shared by all flex items by their flex-grow factor proportionally.</li>\n<li><strong>flex-shrink</strong>: &#x3C;number> If combined flex items size is larger than flex container size, all flex items will be shrinked to fit the container by their flex-shrink factor proportionally.</li>\n<li><strong>flex</strong>: shorthand for flex-grow,flex-shrink,flex-basis, see this <a href=\"https://css-tricks.com/almanac/properties/f/flex-shrink/\">example</a> for better understanding.</li>\n<li><strong>align-self</strong>: override 'align-items' for a single item. Note: If any of the item's cross-axis margin is set to auto, then align-self is ignored.</li>\n<li><strong>order</strong>: &#x3C;number> by default, all flex items have the default order value 0.</li>\n</ul>\n<h2>Examples &#x26; Use cases</h2>\n<p>Examples here are shamelessly stolen from <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes\">MDN</a>.</p>\n<h3>Muti-Column layout (different width)</h3>\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/coderwz/qo3w4hq7/1/embedded/result,html,css/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\nIn this example, we set the all three article flex-basis to be 0, and flxe-grow to be 1, 1, 2 respective, then 3rd article will be twice  as wide as the first two.\n<h3>Responsive Enough</h3>\n<p>We don't have to set multiple break points for media query to achieve this.</p>\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/coderwz/tcdh47hw/embedded/result,html,css/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n<h3>Order the items</h3>\n<p>We can use the <code class=\"language-text\">order</code> attribute to specify the order.</p>\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/coderwz/nue8ntra/embedded/result,html,css/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n<h3>Nested flex boxes</h3>\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/spoiledPiggy/jh1scbpL/embedded/result,html,css/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox\">Flexbox, MDN</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes\">Using CSS Flexible Boxes,  MDN</a></li>\n</ul>","frontmatter":{"date":"August 16, 2017","path":"/blog/flexbox","title":"Flexbox"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}