{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/javascript-language-basics-part1","webpackCompilationHash":"2a35bdc61fe9be83cdc9","result":{"data":{"markdownRemark":{"html":"<h1>Language Basics</h1>\n<p>Javascript, when you first time see this word, you may think there must be some relationship with another popular programming language, Java. To some extent, I agree with you, but the origin of Javascript had nothing to do with Java. When you get to know some syntax of Javascript, you may believe it even more about the preusumed relationship. Indeed, many of the syntax of Javascript look very alike with Java, because Javascript borrowd a lot of stuff from existing languages, including Java. Ok let's begin with basic Javascript syntax.</p>\n<h3>Syntax</h3>\n<h5>Case-sensitivity</h5>\n<p>Everything in Javascript is case-sensitive, i.e. varible name <code class=\"language-text\">test</code> is different from <code class=\"language-text\">Test</code>, see the example below.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> test <span class=\"token operator\">=</span> <span class=\"token string\">'this is test'</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// this is test</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>Test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// an syntax error will be thrown</span></code></pre></div>\n<h5>Identifier</h5>\n<p>An <em>identifier</em> is the name of a variable, function, property or function arguments. In Javascript, an <em>identifier</em> has to follow the rules below.</p>\n<ul>\n<li>The first character must be a letter, an underscore (_) or a dollar sign ($). Numbers(0-9) are not allowed.</li>\n<li>All other characters could be letters, underscores, dollar signs or numbers.</li>\n</ul>\n<p>The recommended naming convention is camel case just like many other languages, meaning that the first letter is lower case and each additional word is offset by a capital letter, see the example below.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">testMachine\ndeletedNode\nsaveAnotherWord</code></pre></div>\n<h5>Comments</h5>\n<p>There are two kinds of comment style in Javascript, inline(//) and asterisk(/*).</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// This is inline comment, often used to comment a single line of code</span>\n\n<span class=\"token comment\">/*\n * This is Aserisk style comment, often used as docString (not sure if Javascript\n * has similar concept or not). This style is used to comment multiple lines.\n */</span></code></pre></div>\n<h5>Strict Mode</h5>\n<p>There are two kinds of mode in Javascript, <em>Strict Mode</em> and <em>Unstrict Mode</em>, if we put string 'strict mode' on top of the javascript file, the JS parser (e.g. browser) will apply a more strict syntax check on the js code. We can also put the string on top of a function body, in that case, the strict mode only exist inside that function, e.g.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'strict mode'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note the default mode will be <em>Unstrict Mode</em> if we do not explicitly put the string there.</p>\n<h5>Statement &#x26; Variable</h5>\n<p>In Javascript, each line ending with a semicolon is a statement, though semicolon is not required.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\nname <span class=\"token operator\">=</span> <span class=\"token string\">'Wen Zhu'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> age <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In the example above, we used a keyword <code class=\"language-text\">var</code> here to declare variables. The first line, we declared a variable called <code class=\"language-text\">name</code>, but it was not initialized, Javascript will give a default value <code class=\"language-text\">undefined</code>(we will talk about it later). Later on we assigned a string 'Wen Zhu' to variable <code class=\"language-text\">name</code>. We also declared a variable <code class=\"language-text\">age</code> and this time we innitilized it with value 25 at the same time.</p>\n<p>If we declare a variable with <code class=\"language-text\">var</code> in the front, that means this is a local variable and the variable won't exist out of the code block (scope). See the example below.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> localVar <span class=\"token operator\">=</span> <span class=\"token string\">\"I'm local.\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>localVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// I'm local.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>localVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// A syntax error thrown, Uncaught ReferenceError: localVar is not defined.</span></code></pre></div>\n<p>If we omit the <code class=\"language-text\">var</code> keyword when declaring a variable, the varible will automatically become a global variable (window). See example.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    globalVar <span class=\"token operator\">=</span> <span class=\"token string\">\"I'm global.\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>globalVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// I'm global.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>globalVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// I'm global.</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>globalVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// I'm global.</span></code></pre></div>\n<p>Javascript variables are loosely typed, meaning that a variable can hold any type of data. This is different from Java, in Java you have to declare the variable with a certain data type beforehand and cannot change its type later on.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> msg <span class=\"token operator\">=</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string</span>\nmsg <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 25</span></code></pre></div>\n<p>From the example above, we can clearly see we can change variable from a String to a Number. Although it is legally to do so in Javascript, but it's not recommended, this will make yourself very confusing and make the code unreadible.</p>\n<p>We can define multiple variables using a single statement.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Wen Zhu'</span><span class=\"token punctuation\">,</span>\n    age <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n    nationality <span class=\"token operator\">=</span> <span class=\"token string\">'China'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> color <span class=\"token operator\">=</span> <span class=\"token string\">'yellow'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// blue</span></code></pre></div>","frontmatter":{"date":"May 04, 2017","path":"/blog/javascript-language-basics-part1","title":"Javascript Language Basics (1)"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}