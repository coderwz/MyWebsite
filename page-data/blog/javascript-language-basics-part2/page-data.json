{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/javascript-language-basics-part2","webpackCompilationHash":"99799fb6266a6920be89","result":{"data":{"markdownRemark":{"html":"<h1>Language Basics</h1>\n<h3>Data Types</h3>\n<p>In javascript, there are 5 simple data types in javascript: <em>String</em>, <em>Number</em>, <em>Boolean</em> and two special types <em>Null</em>, <em>Undefined</em>. They are also called primitive types. There's also one complex data type: <em>Object</em>.</p>\n<p>We can use <code class=\"language-text\">typeof</code> to get the data type of a variabl, see following examples.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> msg <span class=\"token operator\">=</span> <span class=\"token string\">'this is a string'</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"string\"</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"string\", also legal, but not recommended</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"number;</span></code></pre></div>\n<p>However, there a special case here, <code class=\"language-text\">typeof null</code> will return <code class=\"language-text\">object</code> as <code class=\"language-text\">null</code> is considered to be an empty object.</p>\n<h5>The Underfind Type</h5>\n<p>This type has only one value <code class=\"language-text\">undefined</code>. We already know in previous example, when we declare a variable without initializing it, a special value <code class=\"language-text\">undefind</code> will be assgined to this variable. Note, an <code class=\"language-text\">undefined</code> variable is different from a variable that hasn't been declared. See example below.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> msg<span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>msg_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// msg_1 is not declared, so throw an error</span></code></pre></div>\n<h5>The Null Type</h5>\n<p>The Null type is the second special data type which only holds one value <code class=\"language-text\">null</code>. As we mentioned above, <code class=\"language-text\">null</code> type can be considered as an empty object pointer. So we usually initialize a variable to be <code class=\"language-text\">null</code> when this variable is meant to later hold an object.\nThe reason we do this is we can check if the variable equals <code class=\"language-text\">null</code> to determine if the object has been filled, see example below.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> car <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> car<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// object</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>car <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The value <code class=\"language-text\">undefined</code> is a derivative of <code class=\"language-text\">null</code>, so following statement holds true.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<h3>The Boolean Type</h3>\n<p>There are two values: <code class=\"language-text\">true</code> and <code class=\"language-text\">false</code> for Boolean type. Note Javascript is a case-sensitive language, that is to say <code class=\"language-text\">True</code> or <code class=\"language-text\">False</code> is not valid for Boolean values.</p>\n<p>Though there are only two values in Boolean type, but all the variables have its equvalent boolean values. We can use <code class=\"language-text\">Boolean()</code> to convert any type of data to boolean values. See following table for conversion rule.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">| DATA TYPE | VALUES CONVERTED TO TRUE | VALUES CONVERTED TO FALSE |\n| --------- | ------------------------ | ------------------------- |\n| Boolean   |         true             |          false            |\n| String    |   Any nonempty string    |           &#39;&#39;              |\n| Number    |   Any nonzero values     |            0              |\n| Object    |   Any object             |           null            |\n| Undefined |      N/A                 |          undefined        |</code></pre></div>\n<h3>The Number Type</h3>\n<p>Unlike other languages, e.g. Java, javascript uses a unified type to represent various types of number (integer, floating number, oct, hex, etc). </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">var</span> int <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Integers can also be represented as octal and hexadecimal literals. For an octal literal, the first number must be zero(0) followed by a sequence of octal numbers (0-7), for hexadecimal literal, we must make the the first two characters <code class=\"language-text\">0x</code> followed by a sequence of hexadecimal numbers. See example below.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> oct1 <span class=\"token operator\">=</span> <span class=\"token number\">070</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// octal for 56</span>\n<span class=\"token keyword\">var</span> oct2 <span class=\"token operator\">=</span> <span class=\"token number\">079</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// invalid octal, interpreted as 79</span>\n<span class=\"token keyword\">var</span> oct3 <span class=\"token operator\">=</span> <span class=\"token number\">08</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// invalid octal, interpreted as 8</span>\n\n<span class=\"token keyword\">var</span> hex1 <span class=\"token operator\">=</span> <span class=\"token number\">0xA</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hex for 10</span>\n<span class=\"token keyword\">var</span> hex2 <span class=\"token operator\">=</span> <span class=\"token number\">0x1f</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hex for 31</span></code></pre></div>\n<p>Note, in <em>strict mode</em>, octal literals are not allowed, thus all numbers followed by a leading zero will result in an error.</p>\n<h5>Floating-Pointing Values</h5>\n<p>In order to form a floating-point value in Javascript, we should include one decimal point and at least one number after the decimal point. See example below.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> f1 <span class=\"token operator\">=</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1.1</span>\n<span class=\"token keyword\">var</span> f2 <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0.1</span>\n<span class=\"token keyword\">var</span> f3 <span class=\"token operator\">=</span> <span class=\"token number\">.1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// legal, but not recommended</span>\n<span class=\"token keyword\">var</span> f4 <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// whole number, will be interpreted as 1</span>\n<span class=\"token keyword\">var</span> f5 <span class=\"token operator\">=</span> <span class=\"token number\">1.</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// will be interpreted as 1</span></code></pre></div>\n<p>In the example above, variables <code class=\"language-text\">f4</code> and <code class=\"language-text\">f5</code> are interesting enough, since floating-point number needs as twice memory as integer, javascript always try to optimize the value to be integers if necessary.</p>\n<p>For very large or very small floating numbers, we can use <em>e-notation</em> to represent the numbers.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> e1 <span class=\"token operator\">=</span> <span class=\"token number\">1.6e5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 160000</span>\n<span class=\"token keyword\">var</span> e2 <span class=\"token operator\">=</span> <span class=\"token number\">1.6e-5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0.000016</span></code></pre></div>\n<p>Another thing needs our attention is rounding errors. If we open our browser console and try next example, we will find the result quite surprising.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b <span class=\"token operator\">==</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'oh yea!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'what???'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0.30000000000000004</span></code></pre></div>\n<p>This is caused due to how Javascript stores floating values. In JS, floating-point values are accurate up to 17 decimal places but far less accurate in arithmatic computations than whole numbers. Keep those traps in mind and don't try to test for special floating-point values in JS.</p>","frontmatter":{"date":"May 13, 2017","path":"/blog/javascript-language-basics-part2","title":"Javascript Language Basics (2)"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}