{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/final-in-java","webpackCompilationHash":"5bd2b1d1f0be002ed7c1","result":{"data":{"markdownRemark":{"html":"<h1>final in Java</h1>\n<p>There are 3 <code class=\"language-text\">final</code> keyword use cases in Java, for data field, method and class. Below is the notes I took after reading Thinking in Java.</p>\n<h2><code class=\"language-text\">final</code> for data</h2>\n<ol>\n<li>primitive: value cannot be changed.</li>\n<li>object: reference cannot be re-assigned.</li>\n<li>used together with <code class=\"language-text\">static</code> to make it compile-time constant.</li>\n<li>can declare a blank final but have to initialize it in constructor.</li>\n<li>final arguments: cannot be changed inside the method.</li>\n</ol>\n<h2><code class=\"language-text\">final</code> for method</h2>\n<ol>\n<li>make this method non-overriden.</li>\n<li>in earlier java versions, put a final for small-size method could turn any calls to that method into inline callsï¼Œwhich is copy the code directly to the place where the call happens. But now, it is discouraged to do so.</li>\n<li>private method are implicitly final, so no need to put a final before a private method.</li>\n</ol>\n<h2><code class=\"language-text\">final</code> for class</h2>\n<ol>\n<li>make the class non-subclassing. Usually it means you don't want to inherit or anyone else to inherit this class.</li>\n</ol>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://www.amazon.com/Thinking-Java-4th-Bruce-Eckel/dp/0131872486/ref=sr_1_1?ie=UTF8&#x26;qid=1527581039&#x26;sr=8-1&#x26;keywords=thinking+in+java\">Thinking in Java (4th Edition) - Bruce Eckel</a></li>\n</ul>","frontmatter":{"date":"May 29, 2018","path":"/blog/final-in-java","title":"Final in Java"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}