{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/es6-function","webpackCompilationHash":"9ec96531b7f3be084f79","result":{"data":{"markdownRemark":{"html":"<h1>Function in ES6</h1>\n<h3>Summary</h3>\n<p>Generally, there'no fundmental changes in ES6 in terms of <code class=\"language-text\">function</code> but a few minor improvements like parameters, introduction of arrow functions etc.</p>\n<h3>Default Parameters</h3>\n<p>In ES5, default parameters are not real supported, but we can use some tricks to mimic the behavior, for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> timeout<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    timeout <span class=\"token operator\">=</span> timeout <span class=\"token operator\">||</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n    callback <span class=\"token operator\">=</span> callback <span class=\"token operator\">||</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// the rest of the function.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>There are two major flaws for this pattern: 1) the code looks clumsy 2) what if the <code class=\"language-text\">timeout</code> value is 0?</p>\n<p>In ES6, default parameters are natively supported, see following examples:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token number\">2000</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">callback</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// the rest of the code</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this example, <code class=\"language-text\">url</code> will be considered as a required parameter, <code class=\"language-text\">timeout</code> and <code class=\"language-text\">callback</code> which have a default value are considered optional. In this way, we don't need any tricks to mimic default parameter behaviors.\nUnlike other languages, e.g. Python, you don't have to specify default values for all tailing parameters, for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token number\">2000</span><span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// it's not a good part of Javascript IMO</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<h5>How Default Parameters Affect arguments Object</h5>\n<p>In ES5 <code class=\"language-text\">non-strict</code> and <code class=\"language-text\">strict mode</code>, the <code class=\"language-text\">arguments</code> object have different behaviors in terms of if it will be updated inside the function body. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">function</span> <span class=\"token function\">nonStricFunc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">first<span class=\"token punctuation\">,</span> second</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        second <span class=\"token operator\">=</span> <span class=\"token string\">\"updated\"</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>first <span class=\"token operator\">===</span> arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>second <span class=\"token operator\">===</span> arguments<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">stricFunc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">first<span class=\"token punctuation\">,</span> second</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n        \n        second <span class=\"token operator\">=</span> <span class=\"token string\">\"updated\"</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>first <span class=\"token operator\">===</span> arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>second <span class=\"token operator\">===</span> arguments<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">nonStrictFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">strictFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>From this example, we can see that, in <code class=\"language-text\">strict</code> mode, the <code class=\"language-text\">arguments</code> object will remain unchanged inside of the function body.\nIn ES6, this behavior has been unified to be the same as it is in ES5 <code class=\"language-text\">strict</code> mode. Even with default parameters given, the <code class=\"language-text\">arguments</code> object will remain unchanged, see the example below:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">,</span> second<span class=\"token operator\">=</span><span class=\"token string\">'updated'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>first <span class=\"token operator\">===</span> arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>second <span class=\"token operator\">===</span> arguments<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Default Parameter Expression</h3>\n<p>One interesting feature added in ES6 is now you can now use a function expression to provide default parameter values, for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">first<span class=\"token punctuation\">,</span> second<span class=\"token operator\">=</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Preceding arugments can be passed into the function expression to get the default value, but unseen parameters can not be used because they are still in <code class=\"language-text\">TDZ</code>, for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> val <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">first<span class=\"token punctuation\">,</span> second<span class=\"token operator\">=</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">first<span class=\"token operator\">=</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> second</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError</span></code></pre></div>\n<h3>Unnamed Parameters</h3>\n<p>In ES5, unnamed parameters could be accessed though <code class=\"language-text\">arguments</code> object, for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">pick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">object</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>arguments<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        result<span class=\"token punctuation\">[</span>arguments<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> object<span class=\"token punctuation\">[</span>arguments<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> post <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'title'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'ES6 Fucntion'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'author'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Wen Zhu'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'year'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2017</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> postData <span class=\"token operator\">=</span> <span class=\"token function\">pick</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">,</span> <span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'author'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>postData<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ES6 Function</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>postData<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Wen Zhu</span></code></pre></div>\n<p>In this <code class=\"language-text\">pick</code> function, we input an objet and a list of properties we want to get, the response is an object containing those properties and their values. This function works fine, however there are some disadvantages, the first one is it is unclear that this function could take any number of parameters from its function signature and the other one is that the for loop starts from index 1 instead of 0 makes it confusing and buggy-prone.</p>\n<h5>Rest Parameter</h5>\n<p>ES6 solves this problem elegantly using <code class=\"language-text\">rest parameters</code>, let's rewrite the <code class=\"language-text\">pick</code> function in ES6:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">pick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">object<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>keys</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>keys<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        result<span class=\"token punctuation\">[</span>keys<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> object<span class=\"token punctuation\">[</span>keys<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> post <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'title'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'ES6 Fucntion'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'author'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Wen Zhu'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'year'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2017</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> postData <span class=\"token operator\">=</span> <span class=\"token function\">pick</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">,</span> <span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'author'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>postData<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ES6 Function</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>postData<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Wen Zhu</span></code></pre></div>\n<h5>Rest Parameter Restrictions</h5>\n<ul>\n<li>It has to be last</li>\n<li>cannot be used in an object literal setter</li>\n</ul>\n<p>See two examples here:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">pick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">object<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>keys<span class=\"token punctuation\">,</span> last</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// SyntaxError</span>\n<span class=\"token keyword\">let</span> object <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">set</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// SyntaxError: can't use rest params in setter</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The second restriction exists because object literal setter only allows one single parameter.</p>\n<h3>The Spreator Operator</h3>\n<p>The spreator operator works closely with rest parameters, however rest parameters allow you to specify multiple arguments that should be combined into an array, the spreator operator allows you to split an array into separament arguments passing into the functions. Let's take builtin function <code class=\"language-text\">Math.max</code> as an exmaple.\nIn ES5, we usually utilize the function <code class=\"language-text\">apply</code> to pass an array of values into the function:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> values <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">43</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 43</span></code></pre></div>\n<p>In ES6, the spreator operator makes it easier and more elegantly to pass an array into a function:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> values <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">43</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 43</span></code></pre></div>\n<p>We can also mix the sperator operator with other parameters, for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> values <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">43</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>values<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span></code></pre></div>\n<h3>Arrow Functions</h3>\n<p>We've discussed the ES6 block-level function in last post. <em>Arrow Functions</em> is a great weapon introduced in ES6 to deal with block-level functions. As the name suggests, <em>Arrow Functions</em> are defined in a new syntax by using an arrow(=>). The arrow functions work differently from the traditional Javasctipt functions in a number of important ways.</p>\n<ul>\n<li><strong>No <code class=\"language-text\">this</code>, <code class=\"language-text\">super</code>, <code class=\"language-text\">arguments</code> and <code class=\"language-text\">new.target</code> bindings</strong>      those binds are defined by the cloeset containing non-arrow function.</li>\n<li><strong>Cannot be called with <code class=\"language-text\">new</code></strong>      Arrow fuction does not have an internal method <code class=\"language-text\">[[Construct]]</code>, therefore, it cannot be used as an constructor.</li>\n<li><strong>No prototype</strong>     Because you cannot use <code class=\"language-text\">new</code> with arrow functions, so there's no need for a protype.</li>\n<li><strong>Cannot change <code class=\"language-text\">this</code></strong>     You cannot use <code class=\"language-text\">bind</code> to change <code class=\"language-text\">this</code> value in arrow functions.</li>\n<li><strong>No <code class=\"language-text\">arguments</code> object</strong>     As mentioned in the first point, we can see we cannot reply on <code class=\"language-text\">arguments</code> to get the passed parameters.</li>\n<li><strong>No duplicate named parameters</strong>     Arrow functions cannot have duplicate named parameters in both strict and non-strict mode, as opposed to non arrow functions can have duplicate named parameters in non-strict mode.</li>\n</ul>\n<p>Those differences make arrow function more concise and less buggy, because <code class=\"language-text\">this</code> binding is a major source of bugs in Javascript, it is very easy to lose track of <code class=\"language-text\">this</code> value inside a function which can result in unintended behaviors. Another advatange of arrow functions is that the Javascript engine could utilize it to optimize the operations, because unlike regular Javascript functions, arrow functions will not be used as a constructor or otherwise modified.</p>\n<h5>Arrow Function Syntax</h5>\n<p>Let's first look at an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value1<span class=\"token punctuation\">,</span> values</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> value1 <span class=\"token operator\">+</span> value2<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>From this example, basic syntax of arrow function is it begins with functions parameters, followed by arrow, followed by the function body. The parameters are wrapped by parenthese and the function body is wrapped by curly brace. However, if the function only has one parameter we can eliminate the parenthese and similarly we can remove the curly brace and keyword <code class=\"language-text\">return</code> if there's only one return line inside the function body, for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">addOne</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> value<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>But if there's no parameters passed in, we need to keep the parenthese and we also need to keep the curly brace if nothing inside the function body.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">getValue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>One special case about the return value is when we want to return an object literal, we need the returned object wrapped in a parenthese, for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">getItem</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">id</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">:</span> id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Temp'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h5>Creating IIFE</h5>\n<p>We can use arrow functions to easily create immediately invoked function expression (IIFE) by wrapping arrow function in parentheses. for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function-variable function\">getName</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Wen'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Wen</span></code></pre></div>\n<p>Note one difference here is that parentheses can only wrap the arrow function definition, not around ('Wen'), as opposed to non arrow function can include the parameters as well.</p>\n<h3>Tail Call Optimization</h3>\n<p>This is an internal change to the functions in ES6. A <code class=\"language-text\">tail call</code> is when a function is called as the last statement in another function, like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">doSomethingElse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// tail call</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In ES5, tail call is handled just like normal function calls: A new stack frame will be created and pushed onto the call stack to represent the function call. That means all previous function calls are kept in memory, which is problematic when the call stack gets too large.\nES6 makes some optimization to tail call in strict mode (no change in non-stricy mode): Instead of creating a new stack frame for tail call, current stack frame will be cleared and reused as long as the following conditions are met:</p>\n<ul>\n<li>The tail call does not require access to variables in current stack (no closure)</li>\n<li>The function making the tail call has no further work to do after the tail call returns.</li>\n<li>The result of the tail call is returned as the function value.</li>\n</ul>\n<p>For a better understanding how the optimization works, <a href=\"http://2ality.com/2015/06/tail-call-optimization.html\">this</a> is an excellent blog.</p>","frontmatter":{"date":"June 24, 2017","path":"/blog/es6-function","title":"ES6: Function"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}